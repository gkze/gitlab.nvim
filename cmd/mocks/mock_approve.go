// Code generated by MockGen. DO NOT EDIT.
// Source: cmd/app/approve.go
//
// Generated by this command:
//
//	mockgen -source cmd/app/approve.go
//

// Package mock_app is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gitlab "github.com/xanzy/go-gitlab"
	gomock "go.uber.org/mock/gomock"
)

// MockMergeRequestApprover is a mock of MergeRequestApprover interface.
type MockMergeRequestApprover struct {
	ctrl     *gomock.Controller
	recorder *MockMergeRequestApproverMockRecorder
}

// MockMergeRequestApproverMockRecorder is the mock recorder for MockMergeRequestApprover.
type MockMergeRequestApproverMockRecorder struct {
	mock *MockMergeRequestApprover
}

// NewMockMergeRequestApprover creates a new mock instance.
func NewMockMergeRequestApprover(ctrl *gomock.Controller) *MockMergeRequestApprover {
	mock := &MockMergeRequestApprover{ctrl: ctrl}
	mock.recorder = &MockMergeRequestApproverMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMergeRequestApprover) EXPECT() *MockMergeRequestApproverMockRecorder {
	return m.recorder
}

// ApproveMergeRequest mocks base method.
func (m *MockMergeRequestApprover) ApproveMergeRequest(pid any, mr int, opt *gitlab.ApproveMergeRequestOptions, options ...gitlab.RequestOptionFunc) (*gitlab.MergeRequestApprovals, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, mr, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ApproveMergeRequest", varargs...)
	ret0, _ := ret[0].(*gitlab.MergeRequestApprovals)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ApproveMergeRequest indicates an expected call of ApproveMergeRequest.
func (mr_2 *MockMergeRequestApproverMockRecorder) ApproveMergeRequest(pid, mr, opt any, options ...any) *gomock.Call {
	mr_2.mock.ctrl.T.Helper()
	varargs := append([]any{pid, mr, opt}, options...)
	return mr_2.mock.ctrl.RecordCallWithMethodType(mr_2.mock, "ApproveMergeRequest", reflect.TypeOf((*MockMergeRequestApprover)(nil).ApproveMergeRequest), varargs...)
}
